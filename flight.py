# -*- coding: utf-8 -*-
"""flight.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_SprisduxQ8hBFQQauLQfIVBGwIH6HuF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_excel('Data_Train.xlsx')

df_clean=df.copy()

df_clean.head()

df_clean.info()

df_clean.isna().sum()

df_clean.dropna(inplace=True)

df_clean.duplicated().sum()

df_clean.drop_duplicates(inplace=True)

def change_col_datatype(col):
  df_clean[col]=pd.to_datetime(df_clean[col])

df_clean.columns

for i in ['Date_of_Journey','Dep_Time','Arrival_Time']:
  change_col_datatype(i)

df_clean['day_jour']=df_clean['Date_of_Journey'].dt.day

df_clean['month_jour']=df_clean['Date_of_Journey'].dt.month

df_clean.head(2)

df_clean['Dep_Time_hour'] = df_clean['Dep_Time'].dt.hour
df_clean['Dep_Time_min'] = df_clean['Dep_Time'].dt.minute
df_clean['Arrival_Time_hour'] = df_clean['Arrival_Time'].dt.hour
df_clean['Arrival_Time_min'] = df_clean['Arrival_Time'].dt.minute

cat_cols=df_clean.select_dtypes(include='O').columns.tolist()

cat_cols

for col in cat_cols:
    print(df[col].value_counts())

def time_of_day(x):
    if x in range(6,12):
        return 'Morning'
    elif x in range(12,16):
        return 'Afternoon'
    elif x in range(16,22):
        return 'Evening'
    else:
        return 'Late night'
df_clean['orderTimeOfDay']=df_clean['Dep_Time_hour'].apply(time_of_day)

df_clean['Route1']=df_clean['Route'].str.split('→').str[0]
df_clean['Route2']=df_clean['Route'].str.split('→').str[1]
df_clean['Route3']=df_clean['Route'].str.split('→').str[2]
df_clean['Route4']=df_clean['Route'].str.split('→').str[3]
df_clean['Route5']=df_clean['Route'].str.split('→').str[4]

df_clean.isnull().sum()

for i in ['Route3','Route4','Route5']:
  df_clean[i].fillna('None',inplace=True)

df_clean['Total_Stops'].unique()

dict={'non-stop':0,'2 stops':2,'1 stop':1,'3 stops':3,'4 stops':4}
df_clean['Total_Stops']=df_clean['Total_Stops'].map(dict)

df_clean['Total_Stops']

df_clean["Total_Stops"] = pd.to_numeric(df_clean["Total_Stops"])

def hour(x):
    return x.split(' ')[0][0:-1]

df_clean['dur_hour']=df_clean['Duration'].apply(hour)

def minutes(x):
    parts = x.split(' ')
    if len(parts) == 2:
        return parts[1][0:-1]
    else:
        return '0'

df_clean['dur_min']=df_clean['Duration'].apply(minutes)

df_clean.head(3)

df_clean.quantile([0.7, 0.8, 0.9, 0.95, 0.99, 1])

plt.boxplot(df_clean['Price'])

df_clean['Price']=np.where(df_clean['Price']>=40000,df_clean['Price'].median(),df_clean['Price'])

plt.boxplot(df_clean['Price'])

plt.figure(figsize=(15,8))
sns.boxplot(x='Airline',y='Price',data=df.sort_values('Price',ascending=False))

"""Jet Airways Business have the highest Price."""

plt.figure(figsize=(15,8))
sns.boxplot(x='Total_Stops',y='Price',data=df.sort_values('Price',ascending=False))

plt.figure(figsize=(15,15))
sns.catplot(x='Source',y='Price',data=df.sort_values('Price',ascending=False),kind='boxen')

plt.figure(figsize=(15,8))
sns.boxplot(x='Destination',y='Price',data=df.sort_values('Price',ascending=False))

df_clean.columns

sns.histplot(data=df_clean, x='Price')

def countplot(col, title):
    ax = plt.title( title , fontsize = 16)
    ax = sns.countplot(data=df_clean , x = col)
    for label in ax.containers:
        ax.bar_label(label)

countplot('Destination','Destination')

countplot('Source','Source')

countplot('Airline','Airline')

df_clean.head(3)

df_clean['Airline'].value_counts()

df_clean.columns

df_clean=pd.get_dummies(df_clean,columns=['Additional_Info'])

df_clean=pd.get_dummies(df_clean,columns=['Airline'])

df_clean=pd.get_dummies(df_clean,columns=['Source'])

df_clean=pd.get_dummies(df_clean,columns=['Destination'])

df_clean= df_clean.drop('Dep_Time', axis=1)

df_clean= df_clean.drop('Arrival_Time', axis=1)

df_clean.drop('Date_of_Journey', axis=1, inplace=True)

df_clean.drop('Route', axis=1, inplace=True)

df_clean.drop('Duration', axis=1, inplace=True)

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

df_clean['orderTimeOfDay']=le.fit_transform(df_clean['orderTimeOfDay'])

df_clean['Route1']=le.fit_transform(df_clean['Route1'])

df_clean['Route2']=le.fit_transform(df_clean['Route2'])

df_clean['Route3']=le.fit_transform(df_clean['Route3'])

df_clean['Route4']=le.fit_transform(df_clean['Route4'])

df_clean['Route5']=le.fit_transform(df_clean['Route5'])

df_clean["dur_hour"] = pd.to_numeric(df_clean["dur_hour"])

df_clean["dur_min"] = pd.to_numeric(df_clean["dur_min"])

df_clean.head(3)

df_clean.head()

X=df_clean.drop('Price',axis=1)
y=df_clean['Price']

from sklearn.feature_selection import mutual_info_classif

mutual_info_classif(X,y)

imp = pd.DataFrame(mutual_info_classif(X,y),index=X.columns)
imp

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scaler.fit(X_train)

# Ridge Regression
from sklearn.linear_model import Ridge

ridge = Ridge()
ridge.fit(X_train, y_train)

# Predictions
y_pred = ridge.predict(X_test)

# Model Evaluation
print('train acc' , ridge.score( X_train, y_train))
print('test acc' , ridge.score(X_test , y_test))

# Model Building
from sklearn.linear_model import LinearRegression

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)

# Model Evaluation
from sklearn.metrics import mean_squared_error, r2_score

# Predictions
y_pred = lr.predict(X_test)

# Model Evaluation
print('RMSE:', np.sqrt(mean_squared_error(y_test, y_pred)))
print('R2:', r2_score(y_test, y_pred))

# Ridge Regression
from sklearn.linear_model import Lasso

lasso = Lasso()
lasso.fit(X_train, y_train)

# Predictions
y_pred = lasso.predict(X_test)

# Model Evaluation
print('train acc' , lasso.score( X_train, y_train))
print('test acc' , lasso.score(X_test , y_test))

